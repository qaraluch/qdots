# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
# for bash
# .config/nvim/ultisnips/sh.snippets

snippet she "she bang bash" b
#!/usr/bin/env bash
# Author: qaraluch - ${1}.2020 - MIT
# $0
endsnippet

snippet to "TODO" b
# TODO: $0
endsnippet

snippet qd "qnnb date"
`date +%Y-%m-%d_%H%M%S`$0
endsnippet

snippet dd "date"
`date +%Y-%m-%d`$0
endsnippet

snippet if "if ... then (if)"
if ${2:[[ ${1:condition} ]]}; then
	${0:${VISUAL}}
fi
endsnippet

snippet fun "function" b
${1:name}() {
	${0:${VISUAL}}
}
endsnippet

snippet elif "elif"
elif ${2:[[ ${1:condition} ]]}; then
${0:${VISUAL}}
endsnippet

snippet lo "variable local"
local ${1:name}="${2:something}"$0
endsnippet

snippet loe "variable local empty"
local ${1:name}$0
endsnippet

snippet re "variable readonly"
readonly ${1:name}="${2:something}"$0
endsnippet

snippet v "string variable"
${${0:name}}
endsnippet

snippet vq "string variable quoted"
"${${0:name}}"
endsnippet

snippet cmds "command substitution"
$(${0:cat })
endsnippet

snippet ed "echo debug"
echo "${1:name} ---->" "$$1"${0}
endsnippet

snippet clry "color yellow"
$\{_cy\}${1:var}$\{_ce\}
endsnippet
